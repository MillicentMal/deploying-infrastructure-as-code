Parameters:
  # Paramenters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String
  VPCCIDR:
      Description: This is the IP range for the VPC. 
      Type: String
  

  PublicSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
      Type: String
      Default: 10.0.0.0/24

  PublicSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
      Type: String
      Default: 10.0.1.0/24

  PrivateSubnet1CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
      Type: String
      Default: 10.0.2.0/24

  PrivateSubnet2CIDR:
      Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
      Type: String
      Default: 10.0.3.0/24

  key:
      Description: Key to be used for Launch configuration
      Type: String



Resources:
  UdagramVPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VPCCIDR
            EnableDnsHostnames: true
            Tags: 
                - Key: Name 
                  Value: !Ref EnvironmentName
  UdagramInternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref EnvironmentName
            
  InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref UdagramInternetGateway
            VpcId: !Ref UdagramVPC

# SUBNETS

  udagramPublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UdagramVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ0)

  udagramPrivateSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UdagramVPC
            AvailabilityZone: !Select [ 0, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ0)
  udagramPublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UdagramVPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Subnet (AZ1)
  udagramPrivateSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref UdagramVPC
            AvailabilityZone: !Select [ 1, !GetAZs '' ]
            CidrBlock: !Ref PrivateSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Subnet (AZ1)
            
  NAT1:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt EIP1.AllocationId
        SubnetId: !Ref udagramPublicSubnet1 
    
  EIP1:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
        Domain: UdagramVPC
  NAT2:
    Type: AWS::EC2::NatGateway
    Properties:
        AllocationId: !GetAtt EIP2.AllocationId
        SubnetId: !Ref udagramPublicSubnet2
  EIP2:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
        Domain: UdagramVPC


  PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UdagramVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref UdagramInternetGateway

  PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref udagramPublicSubnet1

  PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref udagramPublicSubnet2


  PrivateRouteTable1:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UdagramVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ0)

  DefaultPrivateRoute1:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NAT1

  PrivateSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable1
            SubnetId: !Ref udagramPrivateSubnet1

  PrivateRouteTable2:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref UdagramVPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  DefaultPrivateRoute2:
        Type: AWS::EC2::Route
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            DestinationCidrBlock: 0.0.0.0/0
            NatGatewayId: !Ref NAT2

  PrivateSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PrivateRouteTable2
            SubnetId: !Ref udagramPrivateSubnet2
  
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId: !Ref UdagramVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts
      VpcId: !Ref UdagramVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0

  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html         
      
      ImageId: ami-0729e439b6769d6ab
     
      KeyName: !Ref key
      SecurityGroups: [!Ref "ServerSecurityGroup" , !Ref "LoadBalancerSecurityGroup"]
      InstanceType: t3.small
      BlockDeviceMappings:
      - DeviceName: "/dev/sdk"
        Ebs:
          VolumeSize: 10
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref udagramPrivateSubnet1, !Ref udagramPrivateSubnet2 ]
      # - Fn::ImportValue: 
      #     !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '5'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [ !Ref udagramPublicSubnet1, !Ref udagramPublicSubnet2 ]
      # - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
      # - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups: [!Ref "LoadBalancerSecurityGroup" ]
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref "WebAppTargetGroup"
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: 80
      Protocol: HTTP
  ALBListenerRule:
      Type: AWS::ElasticLoadBalancingV2::ListenerRule
      Properties:
        Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
        Conditions:
        - Field: path-pattern
          Values: [/]
        ListenerArn: !Ref 'Listener'
        Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref "UdagramVPC"

Outputs: 

    VPC: 
        Description: A reference to the created VPC
        Value: !Ref UdagramVPC
        Export:
          Name: UdagramVPC



    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref udagramPublicSubnet1, !Ref udagramPublicSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PublicSubnetsList

    PrivateSubnets:
        Description: A list of the private subnets
        Value: !Join [ ",", [ !Ref udagramPrivateSubnet1, !Ref udagramPrivateSubnet2 ]]
        Export:
          Name: !Sub ${EnvironmentName}-PrivateSubnetsList

    PublicSubnet1:
        Description: A reference to the public subnet in the Availability Zone 1(AZ0)
        Value: !Ref udagramPublicSubnet1
        Export:
          Name: !Sub ${EnvironmentName}-PublicSub1

    PublicSubnet2: 
        Description: A reference to the public subnet in the Availability Zone 2(AZ1)
        Value: !Ref udagramPublicSubnet2
        Export:
          Name: !Sub ${EnvironmentName}-PublicSub2
    
    LoadBalancerUrl:
        Description: Returning the url of the load balancer for testing
        Value: !GetAtt LoadBalancer.DNSName
        Export:
          testURL: !GetAtt LoadBalancer.DNSName



# Sample UserData
# When creating your Launch Configuration, you may need a UserData script
# here's one that you can use for Ubuntu Linux that will:
# Install Apache Web Server, Start it, and create an index.html that will be displayed
# when you visit the IP address of this server with your web browser
#Here it is:
#
#          #!/bin/bash
#          apt-get update -y
#          apt-get install apache2 -y
#          systemctl start apache2.service
#          cd /var/www/html
#          echo "it works! Udagram, Udacity" > index.html
